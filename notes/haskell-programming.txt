referential transparency : same function, given the same values to evalute, will always return the same result. 
Expression: includes concrete values, variables or functions.
Function: is an expression that is applied to an argument or input, and one applied, can be reduced or evaluated.

lambda terms: expressions, variables, and abstractions

--Expression refers to a superset of all those things: 
  an expression can be a variable name
  an abstraction or a combination of those things.
--Abstraction is a function :
  it has a head (a lambda) and a body and is applied to an argument
  Argument : is an input value
  The head of teh function is a λ followed by a variable name, the body of the function is another expression.

  λx.x

    The variable named in the head is the parameter and binds all instances of the same variable in the body of the function.
  --- ALPHA EQUIVALENCE ---

  ---- BETA REDUCTION ---
  When we apply a function to an argument, we substitute the input express for all instances of bound variables within the body of the abstraction (aka function) , you can also eliminate the head of the abstraction, since its only purpose was to bind a variable.
  example: λx.x 
  Using beta reduction: this above become x
  ie2: λx.x+1 =br=> x+1
  ie3: (λx.x)2 =br=> 2. OR λ2.2 =br=> 2

--Beta reduction is the process of applying a lambda term - expresion, abstraction, variable - to an argument (input) and eliminating the head.
  Eliminating the heads tells you the function has been applied.
  λx.x =br=> x
  (λx.x) y = λy (λx.x is an expression/abstraction/head-body) =br=> y
  ie2: (λx.x)(λy.y) =br=> <exp><exp> => <exp> => λx with no body == x

  =BR==> y 

  we'd substitude the entier abstraction in for x, 
  x := z to indicate z will be substituded for all occurrences of x
  (here z is the abstraction/function λy.y) 

  x := (λy.y) 

  ie3: (λx.x)(λy.y)z 

  *NOTE lambda is left associative
  ie3: ((λx.x)(λy.y))z 
  ie3: ([x:=(λy.y)])z 
  ie3: y z => z

  λx.x is called identify function : f(x) = x       

--Free variables (that is, variables in the body (after . of λx.) that are not bound by the head (in this case y) λx.xy
  λxy.yx === λab.ba , λx.xz !== λx.xy because the free variables maybe different
  Alpha equivalence doesn't not apply to free variables. 

  Currying - Each lambda can only bind one parameter and can only accept one argument. Function require multiple arguments have multiple nested heads. When you apply it one and eliminate the first (left most) head, the next one is applied and so on.
  λxy.xy === λx.(λy.xy) 

--- COMBINATORS ---

Combinator is a lambda term with no free variables. It serves only to combine the arguments it is given.


--- Chapter 2 - Hello Haskell ---

  Function
  
  ie: triple x   =  x * 3
      [1]   [2] [3] [4] 

    1. name
    2. Argument to our function. The arguments to our function correspond to the head of a lambdaa.
    3. = is used to define (or declare) vaalues and functions
    4. Body of the function, an expression tahat could be evaluated if the function is applied to a value. 

    Evaluating functions

    Calling a function by name and introducing a value for the x argument makes our function a reducible expression

    ie: triple    2
        (triple x = x * 3 ) 2
        (triple 2 = 2 * 3 )
        Beta reduction -> 2*3 => 6

    Use functions in an infix or prefix style. 
    
      10 `div` 4 
      2

      div 10 4
      2 


      :info to get information such as associativity and precedence of operator.

      ie. 

      :i (*)
      infixl    7  *  
      [1]       [2] [3]

      1. infixl means infix operator, left associative 
      2. 7 is the precedence: higher is applied first, on a scaale of 0 - 9 
      3. infix function name: in this case, multiplicaation

      :i (+) (-)
      infixl 6 +, -
      --      [4]

      4. We use the comma here to assign left-associativity and precedence 6 for two functions (+) and (-)

      :i (^) 
      infixr  8  ^
      [1]    [2] [3] 
      
      1.infixr means infix operator, right associative
      2. 8 is the precedence. Higher precedence, indicated by higher numbers, is applied first, so this is higher precedence
         thaan multiplication (7), addtioin, and substraction (6)

      3. Infix name : in this camse exponentiation.

      ie. infix r

          2 ^ 3 ^ 4

          This is how haaskell will evauate the expression

          2 ^ (3 ^ 4)
          24177516.....
          
          instead of ( 2 ^ 3) ^ 4
                      4060 
                      this is left associative
          

    Anonymous function syntax in Haskell uses a backslash to represent a lambda

    (\x -> x) 0  === λx.x 
    0 

    (\x->x) "blah"
    "blah"


    We can also define the same function in REPL using let:

    let id = \x -> x
    id 0
    0

    Or we can define it this way

    let id x = x
    id 5
    5


    Let expressions into their lambda forms!!

    let a = b in c === (\a -> c) b

    let x = 100 in x + 1000 === (\x -> x + 1000) 100

    Where expression

    c where a = b 

    x + 1000  where x = 10
    



